
/*!
  \mainpage Sparta

  Sparta is a modeling framework, written in C++ (17 or higher) and
  python.  Modeling teams can use Sparta to build abstract performance
  models, detailed performance models, functional models, hybrid
  (performance and functional) models, etc.  Users of Sparta can
  connect Sparta built models to \ref systemc SystemC models, Gem5 models, etc.

  Sparta can be a standalone simulator or embedded in a co-simulation
  environment like verification tools, Verilog, EDA, SystemC,
  etc. Sparta can be a driver or a slave in these co-simulation
  environment.

  Either way, Sparta provides a rich set of classes, tools, utilities,
  and debug facilities to build a custom Core, SoC, or peripheral
  device and run it for functionality, performance analysis, or
  verification.

  <h3>Online Documentation</h3>
  -# \ref building <br>
  Building and understanding what was built<br>&nbsp;

  -# \ref skeleton_example <br>
  A simple producer/consumer pipeline model<br>&nbsp;

  -# \ref core_example <br>
  A basic "super scalar" core example using Sparta<br>&nbsp;

  -# \ref systemc <br>
  SystemC example using the sparta::SysCSpartaSchedulerAdapter and TLM examples<br>&nbsp;

  -# \ref communication <br>
  Examples of using Ports, Events, Clocks, Scheduling, and Event Ordering<br>&nbsp;

  -# \ref modeling <br>
  Reference documentation for the Sparta API<br>&nbsp;

  -# \ref end_user <br>
  Simulator End-User Documentation for Sparta CLI Simulators<br>&nbsp;

  -# \ref application <br>
  Simulator front-end integration with sparta<br>&nbsp;

  -# \ref formats <br>
  File formats used by Sparta<br>&nbsp;

  -# \ref framework_dev <br>
  Documentation for Sparta Developers<br>&nbsp;

  -# \ref best_practices <br>
  Suggested best practices for using Sparta<br>&nbsp;

*/
